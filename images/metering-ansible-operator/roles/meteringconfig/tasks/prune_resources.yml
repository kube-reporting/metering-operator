- name: Query for {{ resource.apis | map(attribute='kind') | join(', ') }} resources with selector {{ label_selector }} to delete
  k8s_facts:
    api_version: "{{ to_delete_item.api_version | default(omit) }}"
    kind: "{{ to_delete_item.kind }}"
    namespace: "{{ namespace }}"
    label_selectors:
      - "{{ label_selector }}"
  loop: "{{ resource.apis }}"
  loop_control:
    loop_var: to_delete_item
  vars:
    label_selector: "{{ meteringcon***REMOVED***g_prune_label_key }}={{ resource.prune_label_value }}"
  register: to_delete

- name: Delete {{ resource.apis | map(attribute='kind') | join(', ') }} resources with selector {{ label_selector}}
  k8s:
    state: absent
    de***REMOVED***nition: "{{ to_delete.results | map(attribute='resources') | flatten }}"
  vars:
    label_selector: "{{ meteringcon***REMOVED***g_prune_label_key }}={{ resource.prune_label_value }}"
  async: "{{ async_seconds | default(0) }}"
  poll: 0
  when: to_delete.changed
  register: delete_resources_async_result

- name: Wait for resources to being deleted when deleted asynchronously
  async_status:
    jid: "{{ delete_resources_async_result.ansible_job_id }}"
  when: async_seconds != 0 and delete_resources_async_result.results is de***REMOVED***ned
  until: delete_resources_job_result.***REMOVED***nished
  # delay is 1 second, so retry up to async_seconds, meaning, wait for all
  # async tasks to complete within the time given to each
  retries: "{{ async_seconds }}"
  delay: 1
  register: delete_resources_job_result
