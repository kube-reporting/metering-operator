# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-namenode
  labels:
    app: hdfs-namenode
    hdfs: namenode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  ports:
  - port: 9820
    name: fs
  clusterIP: None
  selector:
    app: hdfs-namenode
    hdfs: namenode

---

apiVersion: v1
kind: Service
metadata:
  name: hdfs-namenode-proxy
  labels:
    app: hdfs-namenode
    hdfs: namenode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  ports:
  - port: 9820
    name: fs
  selector:
    app: hdfs-namenode
    hdfs: namenode

---
# A headless service for the web interface.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-namenode-web
  labels:
    app: hdfs-namenode
    hdfs: namenode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  ports:
  - port: 9870
    name: web
  selector:
    app: hdfs-namenode
    hdfs: namenode
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: hdfs-namenode
  labels:
    app: hdfs-namenode
    hdfs: namenode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  serviceName: "hdfs-namenode"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: hdfs-namenode
      hdfs: namenode
{{- if .Values.hdfs.spec.namenode.labels }}
{{ toYaml .Values.hdfs.spec.namenode.labels | indent 6 }}
{{- end }}
  template:
    metadata:
      labels:
        app: hdfs-namenode
        hdfs: namenode
{{- if .Values.hdfs.spec.namenode.labels }}
{{ toYaml .Values.hdfs.spec.namenode.labels | indent 8 }}
{{- end }}
      annotations:
        hdfs-con***REMOVED***gmap-hash: {{ include (print $.Template.BasePath "/hdfs/hdfs-con***REMOVED***gmap.yaml") . | sha256sum }}
{{- if .Values.hdfs.spec.namenode.annotations }}
{{ toYaml .Values.hdfs.spec.namenode.annotations | indent 8 }}
{{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.hdfs.spec.namenode.terminationGracePeriodSeconds }}
{{- if .Values.hdfs.spec.securityContext }}
      securityContext:
{{ toYaml .Values.hdfs.spec.securityContext | indent 8 }}
{{- end }}
{{- if .Values.hdfs.spec.namenode.af***REMOVED***nity }}
      af***REMOVED***nity:
{{ toYaml .Values.hdfs.spec.namenode.af***REMOVED***nity | indent 8 }}
{{- end }}
{{- if .Values.hdfs.spec.namenode.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.hdfs.spec.namenode.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.hdfs.spec.namenode.tolerations }}
      tolerations:
{{ toYaml .Values.hdfs.spec.namenode.tolerations | indent 8 }}
{{- end }}
      containers:
      - name: hdfs-namenode
        image: "{{ .Values.hdfs.spec.image.repository }}:{{ .Values.hdfs.spec.image.tag }}"
        imagePullPolicy: {{ .Values.hdfs.spec.image.pullPolicy }}
        command: ["/hadoop-con***REMOVED***g/entrypoint.sh"]
        args: ["/hadoop-con***REMOVED***g/namenode-entrypoint.sh"]
        env:
        - name: CLUSTER_NAME
          value: hdfs-k8s
        - name: HADOOP_LOGLEVEL
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: hdfs-con***REMOVED***g
              key: log-level
        - name: MY_NODE_NAME
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: metadata.namespace
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: hdfs-namenode
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: hdfs-namenode
              resource: limits.memory
        - name: JAVA_MAX_MEM_RATIO
          value: "50"
        ports:
        - containerPort: 9820
          name: fs
        - containerPort: 9870
          name: web
        volumeMounts:
        - name: hdfs-con***REMOVED***g
          mountPath: /hadoop-con***REMOVED***g
        - name: hdfs-namenode-data
          mountPath: /hadoop/dfs/name
          # we use a subPath to avoid the lost+found directory at the root of
          # the volume effecting the hdfs formating
          subPath: hadoop/dfs/name
        # required for openshift
        - name: datanode-empty
          mountPath: /hadoop/dfs/data
        - name: hadoop-logs
          mountPath: /opt/hadoop/logs
        resources:
{{ toYaml .Values.hdfs.spec.namenode.resources | indent 10 }}
      serviceAccount: hdfs
{{- if .Values.hdfs.spec.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.hdfs.spec.imagePullSecrets | indent 8 }}
{{- end }}
      volumes:
      - name: hdfs-con***REMOVED***g
        con***REMOVED***gMap:
          name: hdfs-con***REMOVED***g
          defaultMode: 0555
      - name: datanode-empty
        emptyDir: {}
      - name: hadoop-logs
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: "hdfs-namenode-data"
      labels:
        app: hdfs-namenode
        hdfs: namenode
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.hdfs.spec.namenode.storage.class }}
      resources:
        requests:
          storage: {{ .Values.hdfs.spec.namenode.storage.size }}
