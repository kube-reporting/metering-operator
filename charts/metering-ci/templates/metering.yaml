apiVersion: metering.openshift.io/v1alpha1
kind: Metering
metadata:
  name: "{{ .Values.deployPlatform }}-metering"
spec:
  monitoring:
    enabled: false

  openshift-reporting:
    spec:
      awsBillingReportDataSource:
        enabled: {{ .Values.enableAwsBilling }}
        bucket: "{{ .Values.awsBillingBucket }}"
        pre***REMOVED***x: "{{ .Values.awsBillingBucketPre***REMOVED***x }}"
        region: "{{ .Values.awsBillingBucketRegion }}"

  reporting-operator:
    spec:
      image:
        repository: "{{ .Values.reportingOperatorDeployRepo }}"
        tag: "{{ .Values.reportingOperatorDeployTag }}"

{{- if .Values.imagePullSecretName }}
      imagePullSecrets: [ { name: "{{ .Values.imagePullSecretName }}" } ]
{{- end }}
{{- if .Values.dateAnnotationValue }}
      annotations: { "metering.deploy-custom/deploy-time": "{{ .Values.dateAnnotationValue }}" }
{{- end }}
{{- if .Values.terminationGracePeriodSeconds  }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
{{- end }}

      con***REMOVED***g:
        logLevel: "debug"
        disablePromsum: {{ .Values.disablePromsum }}
        awsAccessKeyID: "{{ .Values.awsAccessKeyId }}"
        awsSecretAccessKey: "{{ .Values.awsSecretAccessKey }}"

        # hard code to 2 hours in tests since tests run hourly scheduled tests
        # and need more than 1 hours worth of data to ensure we have enough for
        # the reports to produce results
        prometheusDatasourceMaxImportBack***REMOVED***llDuration: "2h"

        # increase the poll interval for tests so that the Reports can run
        # sooner
        promsumPollInterval: "30s"

        # increase the chunk size and prom query size decreases the number of
        # imports we need to do to catch up
        prometheusDatasourceMaxQueryRangeDuration: "15m"
        promsumChunkSize: "15m"

        # for ef***REMOVED***ciency, we don't need data at the default 60 second
        # resolution, and we can use a slightly higher resolution for tests
        promsumStepSize: "5m"

  presto:
    spec:
{{- if .Values.imagePullSecretName }}
      imagePullSecrets: [ { name: "{{ .Values.imagePullSecretName }}" } ]
{{- end }}
      con***REMOVED***g:
        awsAccessKeyID: "{{ .Values.awsAccessKeyId }}"
        awsSecretAccessKey: "{{ .Values.awsSecretAccessKey }}"
      presto:
  {{- if .Values.dateAnnotationValue }}
        annotations: { "metering.deploy-custom/deploy-time": "{{ .Values.dateAnnotationValue }}" }
  {{- end }}
  {{- if .Values.terminationGracePeriodSeconds  }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
  {{- end }}
      hive:
  {{- if .Values.dateAnnotationValue }}
        annotations: { "metering.deploy-custom/deploy-time": "{{ .Values.dateAnnotationValue }}" }
  {{- end }}
  {{- if .Values.terminationGracePeriodSeconds  }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
  {{- end }}
{{- if or .Values.hiveMetastoreMemory .Values.hiveMetastoreCpu .Values.hiveMetastoreStorageSize }}
        metastore:
          {{- if or .Values.hiveMetastoreMemory .Values.hiveMetastoreCpu }}
          resources:
            requests:
              memory: "{{ .Values.hiveMetastoreMemory }}"
              cpu: "{{ .Values.hiveMetastoreCpu }}"
            limits:
              memory: "{{ .Values.hiveMetastoreMemory }}"
              cpu: "{{ .Values.hiveMetastoreCpu }}"
          {{- end }}
          {{- if .Values.hiveMetastoreStorageSize }}
          storage:
            size: "{{ .Values.hiveMetastoreStorageSize }}"
          {{- end }}
{{- end }}

  hdfs:
    spec:
{{- if .Values.imagePullSecretName }}
      imagePullSecrets: [ { name: "{{ .Values.imagePullSecretName }}" } ]
{{- end }}
      datanode:
  {{- if .Values.dateAnnotationValue }}
        annotations: { "metering.deploy-custom/deploy-time": "{{ .Values.dateAnnotationValue }}" }
  {{- end }}
  {{- if .Values.terminationGracePeriodSeconds  }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
  {{- end }}
  {{- if .Values.hdfsDatanodeMemory }}
        resources:
          requests:
            memory: "{{ .Values.hdfsDatanodeMemory }}"
          limits:
            memory: "{{ .Values.hdfsDatanodeMemory }}"
  {{- end }}
  {{- if .Values.hdfsDatanodeStorageSize }}
        storage:
          size: {{ .Values.hdfsDatanodeStorageSize }}
  {{- end }}
      namenode:
  {{- if .Values.dateAnnotationValue }}
        annotations: { "metering.deploy-custom/deploy-time": "{{ .Values.dateAnnotationValue }}" }
  {{- end }}
  {{- if .Values.terminationGracePeriodSeconds  }}
        terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
  {{- end }}
  {{- if .Values.hdfsNamenodeMemory }}
        resources:
          requests:
            memory: "{{ .Values.hdfsNamenodeMemory }}"
          limits:
            memory: "{{ .Values.hdfsNamenodeMemory }}"
  {{- end }}
  {{- if .Values.hdfsNamenodeStorageSize   }}
        storage:
          size: {{ .Values.hdfsNamenodeStorageSize }}
  {{- end }}
