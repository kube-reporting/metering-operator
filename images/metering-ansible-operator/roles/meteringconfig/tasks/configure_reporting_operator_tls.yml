---

#
# Reporting Operator Presto TLS/auth
#
- name: Check for the existence of the reporting-operator Presto TLS-related secrets
  block:
  - name: Check for the existence of the reporting-operator Presto client auth secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.auth.secretName }}"
      namespace: "{{ meta.namespace }}"
    no_log: true
    register: reporting_operator_auth_secret_buf

  - name: Con***REMOVED***gure the reporting-operator to use existing presto server TLS secret data
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_presto_server_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
    no_log: true

  - name: Con***REMOVED***gure the reporting-operator to use existing presto client TLS secret data
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_presto_client_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_reporting_operator_presto_client_cert: "{{ reporting_operator_auth_secret_buf.resources[0].data['tls.crt'] | b64decode }}"
      _meteringcon***REMOVED***g_reporting_operator_presto_client_key: "{{ reporting_operator_auth_secret_buf.resources[0].data['tls.key'] | b64decode }}"
    no_log: true
    when: reporting_operator_auth_secret_exists
  vars:
    reporting_operator_auth_secret_exists: "{{ reporting_operator_auth_secret_buf.resources is de***REMOVED***ned and reporting_operator_auth_secret_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled

- name: Con***REMOVED***gure TLS and authentication in the reporting-operator to Presto
  block:
  - name: Generate the reporting-operator client certs as needed
    include_tasks: con***REMOVED***gure_reporting_operator_openssl.yml

  - name: Con***REMOVED***gure the reporting-operator to use it's client own cert/key when communicating with Presto
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_presto_client_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_reporting_operator_presto_client_cert: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/reporting_operator_client.crt') + '\n' }}"
      _meteringcon***REMOVED***g_reporting_operator_presto_client_key: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/reporting_operator_client.key') + '\n' }}"
    no_log: true
    when: not reporting_operator_auth_secret_exists
  vars:
    reporting_operator_auth_secret_exists: "{{ reporting_operator_auth_secret_buf.resources is de***REMOVED***ned and reporting_operator_auth_secret_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled

#
# Reporting Operator Hive TLS/auth
#
- name: Check for the existence of reporting-operator Hive TLS-related secrets
  block:
  - name: Check for the existence of the reporting-operator Hive client auth secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.auth.secretName }}"
      namespace: "{{ meta.namespace }}"
    no_log: true
    register: reporting_operator_hive_auth_secret_buf

  - name: Con***REMOVED***gure the reporting-operator to use the Metering Root CA for Hive Server CA
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_hive_server_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
    no_log: true

  - name: Con***REMOVED***gure the reporting-operator to use it's client own cert/key when communicating with Hive
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_hive_client_certi***REMOVED***cate: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/reporting_operator_client.crt') + '\n' }}"
      _meteringcon***REMOVED***g_reporting_operator_hive_client_key: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/reporting_operator_client.key') + '\n' }}"
    no_log: true
    when: not reporting_operator_hive_auth_secret_exists

  - name: Con***REMOVED***gure the reporting-operator to use the existing client cert/key
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_hive_client_certi***REMOVED***cate: "{{ reporting_operator_hive_auth_secret_buf.resources[0].data['tls.crt'] | b64decode }}"
      _meteringcon***REMOVED***g_reporting_operator_hive_client_key: "{{ reporting_operator_hive_auth_secret_buf.resources[0].data['tls.key'] | b64decode }}"
    no_log: true
    when: reporting_operator_hive_auth_secret_exists
  vars:
    reporting_operator_hive_auth_secret_exists: "{{ reporting_operator_hive_auth_secret_buf.resources is de***REMOVED***ned and reporting_operator_hive_auth_secret_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled

#
# Reporting Operator Openshift Auth-Proxy
#
- name: Validate the user-provided authProxy con***REMOVED***guration
  include_tasks: validate_reporting_operator_tls.yml
  when: not meteringcon***REMOVED***g_tls_enabled

- name: Check for the existence of reporting-operator authProxy-related secret data
  block:
  - name: Check for the existence of the reporting-operator authProxy cookie seed secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.cookie.secretName }}"
      namespace: "{{ meta.namespace }}"
    no_log: true
    register: reporting_operator_auth_proxy_cookie_secret_buf
    when: meteringcon***REMOVED***g_tls_enabled

  - name: Generate cookie seed and con***REMOVED***guring authProxy to use that generated seed value
    block:
    - name: Generate a 32-character random string
      command: openssl rand -base64 32
      register: cookie_seed_random_string
      when: not reporting_operator_auth_proxy_cookie_secret_exists

    - name: Con***REMOVED***gure authProxy cookie seed secret
      set_fact:
        _meteringcon***REMOVED***g_reporting_operator_auth_proxy_cookie_seed: "{{ cookie_seed_random_string.stdout }}"
      no_log: true
    when: not reporting_operator_auth_proxy_cookie_secret_exists

  - name: Con***REMOVED***gure authProxy cookie seed secret to use pre-existing secret data
    set_fact:
      _meteringcon***REMOVED***g_reporting_operator_auth_proxy_cookie_seed: "{{ reporting_operator_auth_proxy_cookie_secret_buf.resources[0].data['cookie-secret-seed'] | b64decode }}"
    no_log: true
    when: reporting_operator_auth_proxy_cookie_secret_exists
  vars:
    reporting_operator_auth_proxy_cookie_secret_exists: "{{ reporting_operator_auth_proxy_cookie_secret_buf.resources is de***REMOVED***ned and reporting_operator_auth_proxy_cookie_secret_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled
