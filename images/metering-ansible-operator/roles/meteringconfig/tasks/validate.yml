---

- include_tasks: update_meteringcon***REMOVED***g_status.yml
  vars:
    current_conditions:
      type: "Running"
      status: "True"
      message: "Starting the validation process"
      lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"

#
# Validate OCP-only features were properly disabled
#
- name: Validate ***REMOVED***elds when OCP-only features are disabled
  block:
  - name: Validate that top-level TLS key is unset/disabled
    assert:
      that:
        - meteringcon***REMOVED***g_spec | json_query('tls.enabled') != true
      msg: "Invalid con***REMOVED***guration for non-OKD distributions: You cannot set the tls.enabled key to true when disabling OCP-only features."

  - name: Validate that the Prometheus URL is set
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'] | json_query('spec.con***REMOVED***g.prometheus.url') != ""
      msg: "Invalid con***REMOVED***guration for non-OKD distributions: You must set the reporting-operator.spec.con***REMOVED***g.prometheus.url."

  - name: Validate that the reporting-operator Openshift Route is not enabled
    assert:
      that:
      - meteringcon***REMOVED***g_spec['reporting-operator'] | json_query('spec.route.enabled') != true
      msg: "Invalid con***REMOVED***guration for non-OKD distributions: You cannot enable the Openshift-only reporting-operator route."

  - name: Validate that the reporting-operator OAuth authProxy is not enabled
    assert:
      that:
      - meteringcon***REMOVED***g_spec['reporting-operator'] | json_query('spec.authProxy.enabled') != true
      msg: "Invalid con***REMOVED***guration for non-OKD distributions: You cannot enable the Openshift-only reporting-operator authProxy."
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
  when: meteringcon***REMOVED***g_ocp_disabled

#
# Validate the user-provided storage con***REMOVED***guration
#
- name: Validate the storage con***REMOVED***guration
  block:
  - name: Validate the user-provided storage type
    assert:
      that:
        - storageType is not unde***REMOVED***ned and storageType == 'hive'
      msg: "Unsupported spec.storage.type, only 'hive' is  a supported option"

  - name: Validate the user-provided Hive storage con***REMOVED***guration matches a support option
    assert:
      that:
        - hiveStorageType is not unde***REMOVED***ned and hiveStorageType in ['s3', 'sharedPVC', 'hdfs', 'azure', 'gcs' , 's3Compatible']
      msg: "Invalid spec.storage.hive.type: '{{ hiveStorageType }}', must be one of hdfs, s3, azure, gcs, s3Compatible or sharedPVC"
  vars:
    storageType: "{{ meteringcon***REMOVED***g_spec_overrides | json_query('storage.type') }}"
    hiveStorageType: "{{ meteringcon***REMOVED***g_spec_overrides | json_query('storage.hive.type') }}"
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"

- include_tasks: update_meteringcon***REMOVED***g_status.yml
  vars:
    current_conditions:
      type: "Running"
      status: "True"
      message: "Finished the validation process"
      lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
