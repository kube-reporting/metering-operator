---

- name: Validate the user-provided Presto TLS con***REMOVED***guration
  include_tasks: validate_presto_tls.yml
  when: not meteringcon***REMOVED***g_tls_enabled

#
# Check for Presto TLS and auth secret existence (to avoid re-generating/overwriting the secret data if that secret name already exists)
#
- name: Check for the existence of Presto TLS-related secrets
  block:
  - name: Check for the existence of the Presto TLS secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ meteringcon***REMOVED***g_spec.presto.spec.con***REMOVED***g.tls.secretName }}"
      namespace: "{{ meta.namespace }}"
    no_log: true
    register: presto_secret_tls_buf
    when: meteringcon***REMOVED***g_tls_enabled

  - name: Check for the existence of the Presto Auth secret
    k8s_facts:
      api_version: v1
      kind: Secret
      name: "{{ meteringcon***REMOVED***g_spec.presto.spec.con***REMOVED***g.auth.secretName }}"
      namespace: "{{ meta.namespace }}"
    no_log: true
    register: presto_secret_auth_buf

  - name: Con***REMOVED***gure Presto to use existing server TLS secret data
    set_fact:
      _meteringcon***REMOVED***g_presto_server_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_presto_server_certi***REMOVED***cate: "{{ presto_secret_tls_buf.resources[0].data['tls.crt'] | b64decode }}"
      _meteringcon***REMOVED***g_presto_server_key: "{{ presto_secret_tls_buf.resources[0].data['tls.key'] | b64decode }}"
    no_log: true
    when: presto_tls_secret_exists

  - name: Con***REMOVED***gure Presto to use existing client TLS secret data
    set_fact:
      _meteringcon***REMOVED***g_presto_client_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_presto_client_certi***REMOVED***cate: "{{ presto_secret_auth_buf.resources[0].data['tls.crt'] | b64decode }}"
      _meteringcon***REMOVED***g_presto_client_key: "{{ presto_secret_auth_buf.resources[0].data['tls.key'] | b64decode }}"
    no_log: true
    when: presto_auth_secret_exists
  vars:
    presto_tls_secret_exists: "{{ presto_secret_tls_buf.resources and presto_secret_tls_buf.resources | length > 0 }}"
    presto_auth_secret_exists: "{{ presto_secret_auth_buf.resources and presto_secret_auth_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled

#
# Generate server and client certi***REMOVED***cates for Presto (as needed) using the Ansible OpenSSL modules when top-level spec.tls.enabled is set to true
#
- name: Con***REMOVED***gure TLS and client-side authentication for Presto
  block:
  - name: Generate Presto server and client TLS certi***REMOVED***cates and keys
    include_tasks: con***REMOVED***gure_presto_openssl.yml

  - name: Con***REMOVED***gure Presto to use generated server certi***REMOVED***cate and key
    set_fact:
      _meteringcon***REMOVED***g_presto_server_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_presto_server_certi***REMOVED***cate: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/presto_server.crt') + '\n' }}"
      _meteringcon***REMOVED***g_presto_server_key: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/presto_server.key') + '\n' }}"
    no_log: true
    when: not presto_tls_secret_exists

  - name: Con***REMOVED***gure Presto to use the generated client certi***REMOVED***cate and key
    set_fact:
      _meteringcon***REMOVED***g_presto_client_ca_certi***REMOVED***cate: "{{ _meteringcon***REMOVED***g_tls_root_ca_certi***REMOVED***cate }}"
      _meteringcon***REMOVED***g_presto_client_certi***REMOVED***cate: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/presto_client.crt') + '\n' }}"
      _meteringcon***REMOVED***g_presto_client_key: "{{ lookup('***REMOVED***le', '{{ certi***REMOVED***cates_dir.path }}/presto_client.key') + '\n' }}"
    no_log: true
    when: not presto_auth_secret_exists
  vars:
    presto_tls_secret_exists: "{{ presto_secret_tls_buf.resources and presto_secret_tls_buf.resources | length > 0 }}"
    presto_auth_secret_exists: "{{ presto_secret_auth_buf.resources and presto_secret_auth_buf.resources | length > 0 }}"
  when: meteringcon***REMOVED***g_tls_enabled and (not presto_tls_secret_exists or not presto_auth_secret_exists)
