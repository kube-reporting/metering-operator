operator:
  name: metering-operator

  useTargetNamespacesDownwardAPIValueFrom: false

  disableOCPFeatures: true

  image:
    repository: quay.io/coreos/metering-ansible-operator
    tag: release-4.4
    pullPolicy: Always

olm:
  packageName: metering-upstream
  channels:
  - name: "4.4"
    currentCSV: metering-operator-upstream.v4.4.0

  skipARTPackage: true

  imageTags:
  - name: metering-ansible-operator
    from:
      kind: DockerImage
      name: quay.io/coreos/metering-ansible-operator:release-4.4
  - name: metering-reporting-operator
    from:
      kind: DockerImage
      name: quay.io/coreos/metering-reporting-operator:release-4.4
  - name: metering-presto
    from:
      kind: DockerImage
      name: quay.io/coreos/presto:release-4.4
  - name: metering-hive
    from:
      kind: DockerImage
      name: quay.io/coreos/hive:release-4.4
  - name: metering-hadoop
    from:
      kind: DockerImage
      name: quay.io/coreos/hadoop:release-4.4
  - name: ghostunnel
    from:
      kind: DockerImage
      name: quay.io/coreos/metering-ghostunnel:release-4.4

  csv:
    name : metering-operator-upstream.v4.4.0
    version: "4.4.0"
    minKubeVersion: "1.11.0"

    description: |
      Operator Metering is a chargeback and reporting tool to provide accountability for how resources are used across a cluster. Cluster admins can schedule reports based on historical usage data by Pod, Namespace, and Cluster wide. Operator Metering is part of the [Operator Framework](https://coreos.com/blog/introducing-operator-framework-metering).

      Read the user guide for more details on [running and viewing your first report](https://github.com/operator-framework/operator-metering/blob/master/Documentation/using-metering.md).

      ### Core capabilities

      * **Chargeback/Showback** - Break down the reserved and utlized resources requested by applications.

      * **Pod, Namespace & Cluster Reports** - Built in reports exist to break down CPU and RAM in any way you desire.

      * **Scheduled Reports** - Schedule reports to run on a standard interval, eg. daily or monthly

      * **Post-Processing** - Reports are generated in CSV format and stored in persistent storage for further post-processing. Use this to send reminder emails, integrate into your ERP system, or graph on a dashboard.

      * **HTTP API** - Reports can be queried from an in-cluster HTTP API in addition to reading from persistent storage.

      ### Before you start

      Metering runs a big data stack to crunch your data and requires at least 4GB of RAM and 4 CPU cores. At least one Node should have 2GB of RAM and 2 CPU cores. Memory and CPU consumption may often be lower, but will spike when running reports, or collecting data for larger clusters.

      ### Common Configurations

      Metering works out of the box without any customizations or configuration. Read the [full documentation](https://github.com/operator-framework/operator-metering/blob/master/Documentation/metering-config.md) for more details.

      * **Use a specific StorageClass** - Follow the example to [use your own StorageClass](https://github.com/operator-framework/operator-metering/blob/master/manifests/metering-config/shared-storage.yaml) instead of the Dynamic Provisioner.

      * **Store data in S3 instead of PV** - Store your report output [in an S3 bucket](https://github.com/operator-framework/operator-metering/blob/master/Documentation/configuring-storage.md#storing-data-in-s3) instead of a PersistentVolume.

      * **Configure AWS Billing Data Source** - To assign Pod $$ costs on AWS, create a [read-only IAM user](https://github.com/operator-framework/operator-metering/blob/master/Documentation/configuring-aws-billing.md) ([example-policy](https://github.com/operator-framework/operator-metering/blob/master/Documentation/aws/read-only.json)) and [configure Metering](https://github.com/operator-framework/operator-metering/blob/master/manifests/metering-config/aws-billing.yaml) to use it.

    links:
    - name: Documentation
      url: https://github.com/operator-framework/operator-metering/blob/master/Documentation/index.md

    maintainers:
    - name: Red Hat
      email: sd-operator-metering@redhat.com
    provider:
      name: Red Hat

    annotations:
      categories: "OpenShift Optional, Monitoring"
      certified: "false"
      capabilities: Basic Install
      support: Red Hat, Inc.
      createdAt: "2019-01-01T11:59:59Z"
      containerImage: "quay.io/coreos/metering-ansible-operator:4.4"

  subscriptionName: metering
  subscriptionChannel: stable

  catalogSourceConfigName: installed-upstream-metering-operators-metering
  catalogSourceConfigNamespace: marketplace
  catalogSourceConfigTargetNamespace: metering
  catalogSourceConfigOperatorSource: upstream-community-operators

  operatorGroupName: metering-operators
  operatorGroupTargetNamespaces: ["metering"]
  telemeterManifestGeneration: false
