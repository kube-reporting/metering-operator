---

#
# Validate that the user-provided reporting-operator Presto ***REMOVED***elds were properly con***REMOVED***gured
#
- name: Validate that the user-provided Presto server TLS ***REMOVED***elds are not empty
  block:
  - name: Validate that the user provided a non-empty TLS CA certi***REMOVED***cate value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.tls.caCerti***REMOVED***cate != ""
      msg: "reporting-operator.spec.con***REMOVED***g.presto.tls.caCerti***REMOVED***cate cannot be empty if createSecret: true and secretName != ''"
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
  when: meteringcon***REMOVED***g_template_presto_tls_secret

- name: Validate that the user-provided Presto client Auth ***REMOVED***elds are not empty
  block:
  - name: Validate that the user provided a non-empty auth certi***REMOVED***cate value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.auth.certi***REMOVED***cate != ""
      msg: "reporting-operator.spec.con***REMOVED***g.presto.auth.certi***REMOVED***cate cannot be empty if createSecret: true and secretName != ''"

  - name: Validate that the user provided a non-empty auth key value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.auth.key != ""
      msg: "reporting-operator.spec.con***REMOVED***g.presto.auth.key cannot be empty if createSecret: true and secretName != ''"

  - name: Validate that TLS is enabled when auth is enabled
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.tls.enabled and meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.presto.auth.enabled
      msg: "Invalid con***REMOVED***guration: you cannot enable auth but disable TLS."
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
  when: meteringcon***REMOVED***g_template_presto_auth_secret

#
# Validate that the user-provided reporting-operator Hive ***REMOVED***elds were properly con***REMOVED***gured
#
- name: Validate that the user-provided Hive TLS/auth ***REMOVED***elds are not empty
  block:
  - name: Validate that the user provided a non-empty Hive TLS CA certi***REMOVED***cate value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.tls.caCerti***REMOVED***cate != ""
      msg: "reporting-operator.spec.con***REMOVED***g.presto.tls.caCerti***REMOVED***cate cannot be empty if createSecret: true and secretName != ''"

  - name: Validate that the user provided a non-empty Hive auth certi***REMOVED***cate value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.auth.certi***REMOVED***cate != ""
      msg: "reporting-operator.spec.con***REMOVED***g.hive.auth.certi***REMOVED***cate cannot be empty if createSecret: true and secretName != ''"

  - name: Validate that the user provided a non-empty Hive auth key value
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.auth.key != ""
      msg: "reporting-operator.spec.con***REMOVED***g.hive.auth.key cannot be empty if createSecret: true and secretName != ''"

  - name: Validate that TLS is enabled when auth is enabled
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.tls.enabled and meteringcon***REMOVED***g_spec['reporting-operator'].spec.con***REMOVED***g.hive.auth.enabled
      msg: "Invalid con***REMOVED***guration: you cannot enable auth but disable TLS."
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
  when: meteringcon***REMOVED***g_template_hive_secrets

#
# Validate that the user-provided authProxy ***REMOVED***elds were properly con***REMOVED***gured
#
- name: Validate the user-provided authProxy ***REMOVED***elds are not empty
  block:
  - name: Verify that authProxy.cookie.secretName is not empty
    assert:
      that:
        # note: we already do validation of the seed being non-empty
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.cookie.secretName != ""
      msg: "spec.reporting-operator.spec.authProxy.cookie.secretName cannot be empty when createSecret is set to true"

  - name: Verify that authProxy.htpasswd.secretName is not empty
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.htpasswd.secretName != ""
      msg: "spec.reporting-operator.spec.authProxy.htpasswd.secretName cannot be empty when createSecret is set to true"

  - name: Verify that authProxy.authenticatedEmails was con***REMOVED***gured properly
    assert:
      that:
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.authenticatedEmails.secretName != ""
        - meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.authenticatedEmails.data != ""
      msg: "spec.reporting-operator.spec.authProxy.authenticatedEmails: secretName and/or data key(s) cannot be empty when enabled and createSecret is set to true"
    when: meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.authenticatedEmails.enabled and meteringcon***REMOVED***g_spec['reporting-operator'].spec.authProxy.authenticatedEmails.createSecret
  rescue:
  - include_tasks: update_meteringcon***REMOVED***g_status.yml
    vars:
      end_play_after_updating_status: true
      current_conditions:
        type: "Invalid"
        status: "True"
        message: |
          "Failed task name: {{ ansible_failed_task.name }}"
          "Failed task message: {{ ansible_failed_result.msg }}"
        lastTransitionTime: "{{ now(utc=False).isoformat() + 'Z' }}"
