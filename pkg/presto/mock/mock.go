// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/presto/db.go

// Package mockpresto is a generated GoMock package.
package mockpresto

import (
	gomock "github.com/golang/mock/gomock"
	presto "github.com/operator-framework/operator-metering/pkg/presto"
	reflect "reflect"
)

// MockQueryer is a mock of Queryer interface
type MockQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockQueryerMockRecorder
}

// MockQueryerMockRecorder is the mock recorder for MockQueryer
type MockQueryerMockRecorder struct {
	mock *MockQueryer
}

// NewMockQueryer creates a new mock instance
func NewMockQueryer(ctrl *gomock.Controller) *MockQueryer {
	mock := &MockQueryer{ctrl: ctrl}
	mock.recorder = &MockQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryer) EXPECT() *MockQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockQueryer) Query(query string) ([]presto.Row, error) {
	ret := m.ctrl.Call(m, "Query", query)
	ret0, _ := ret[0].([]presto.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockQueryerMockRecorder) Query(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockQueryer)(nil).Query), query)
}

// MockExecer is a mock of Execer interface
type MockExecer struct {
	ctrl     *gomock.Controller
	recorder *MockExecerMockRecorder
}

// MockExecerMockRecorder is the mock recorder for MockExecer
type MockExecerMockRecorder struct {
	mock *MockExecer
}

// NewMockExecer creates a new mock instance
func NewMockExecer(ctrl *gomock.Controller) *MockExecer {
	mock := &MockExecer{ctrl: ctrl}
	mock.recorder = &MockExecerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecer) EXPECT() *MockExecerMockRecorder {
	return m.recorder
}

// Exec mocks base method
func (m *MockExecer) Exec(query string) error {
	ret := m.ctrl.Call(m, "Exec", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockExecerMockRecorder) Exec(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecer)(nil).Exec), query)
}

// MockExecQueryer is a mock of ExecQueryer interface
type MockExecQueryer struct {
	ctrl     *gomock.Controller
	recorder *MockExecQueryerMockRecorder
}

// MockExecQueryerMockRecorder is the mock recorder for MockExecQueryer
type MockExecQueryerMockRecorder struct {
	mock *MockExecQueryer
}

// NewMockExecQueryer creates a new mock instance
func NewMockExecQueryer(ctrl *gomock.Controller) *MockExecQueryer {
	mock := &MockExecQueryer{ctrl: ctrl}
	mock.recorder = &MockExecQueryerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecQueryer) EXPECT() *MockExecQueryerMockRecorder {
	return m.recorder
}

// Query mocks base method
func (m *MockExecQueryer) Query(query string) ([]presto.Row, error) {
	ret := m.ctrl.Call(m, "Query", query)
	ret0, _ := ret[0].([]presto.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockExecQueryerMockRecorder) Query(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockExecQueryer)(nil).Query), query)
}

// Exec mocks base method
func (m *MockExecQueryer) Exec(query string) error {
	ret := m.ctrl.Call(m, "Exec", query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MockExecQueryerMockRecorder) Exec(query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockExecQueryer)(nil).Exec), query)
}
