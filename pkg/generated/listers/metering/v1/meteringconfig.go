// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/operator-framework/operator-metering/pkg/apis/metering/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeteringCon***REMOVED***gLister helps list MeteringCon***REMOVED***gs.
type MeteringCon***REMOVED***gLister interface {
	// List lists all MeteringCon***REMOVED***gs in the indexer.
	List(selector labels.Selector) (ret []*v1.MeteringCon***REMOVED***g, err error)
	// MeteringCon***REMOVED***gs returns an object that can list and get MeteringCon***REMOVED***gs.
	MeteringCon***REMOVED***gs(namespace string) MeteringCon***REMOVED***gNamespaceLister
	MeteringCon***REMOVED***gListerExpansion
}

// meteringCon***REMOVED***gLister implements the MeteringCon***REMOVED***gLister interface.
type meteringCon***REMOVED***gLister struct {
	indexer cache.Indexer
}

// NewMeteringCon***REMOVED***gLister returns a new MeteringCon***REMOVED***gLister.
func NewMeteringCon***REMOVED***gLister(indexer cache.Indexer) MeteringCon***REMOVED***gLister {
	return &meteringCon***REMOVED***gLister{indexer: indexer}
}

// List lists all MeteringCon***REMOVED***gs in the indexer.
func (s *meteringCon***REMOVED***gLister) List(selector labels.Selector) (ret []*v1.MeteringCon***REMOVED***g, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MeteringCon***REMOVED***g))
	})
	return ret, err
}

// MeteringCon***REMOVED***gs returns an object that can list and get MeteringCon***REMOVED***gs.
func (s *meteringCon***REMOVED***gLister) MeteringCon***REMOVED***gs(namespace string) MeteringCon***REMOVED***gNamespaceLister {
	return meteringCon***REMOVED***gNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeteringCon***REMOVED***gNamespaceLister helps list and get MeteringCon***REMOVED***gs.
type MeteringCon***REMOVED***gNamespaceLister interface {
	// List lists all MeteringCon***REMOVED***gs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MeteringCon***REMOVED***g, err error)
	// Get retrieves the MeteringCon***REMOVED***g from the indexer for a given namespace and name.
	Get(name string) (*v1.MeteringCon***REMOVED***g, error)
	MeteringCon***REMOVED***gNamespaceListerExpansion
}

// meteringCon***REMOVED***gNamespaceLister implements the MeteringCon***REMOVED***gNamespaceLister
// interface.
type meteringCon***REMOVED***gNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeteringCon***REMOVED***gs in the indexer for a given namespace.
func (s meteringCon***REMOVED***gNamespaceLister) List(selector labels.Selector) (ret []*v1.MeteringCon***REMOVED***g, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MeteringCon***REMOVED***g))
	})
	return ret, err
}

// Get retrieves the MeteringCon***REMOVED***g from the indexer for a given namespace and name.
func (s meteringCon***REMOVED***gNamespaceLister) Get(name string) (*v1.MeteringCon***REMOVED***g, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("meteringcon***REMOVED***g"), name)
	}
	return obj.(*v1.MeteringCon***REMOVED***g), nil
}
