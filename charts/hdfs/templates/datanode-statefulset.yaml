# A headless service to create DNS records.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-datanode
  labels:
    app: hdfs-datanode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  ports:
  - port: 9866
    name: fs
  clusterIP: None
  selector:
    app: hdfs-datanode
---
# A headless service for the web interface.
apiVersion: v1
kind: Service
metadata:
  name: hdfs-datanode-web
  labels:
    app: hdfs-datanode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  ports:
  - port: 9864
    name: web
  selector:
    app: hdfs-datanode
---

apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: hdfs-datanode
  labels:
    app: hdfs-datanode
{{- block "extraMetadata" . }}
{{- end }}
spec:
  serviceName: "hdfs-datanode"
  replicas: {{ .Values.spec.datanode.replicas }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: hdfs-datanode
{{- if .Values.spec.datanode.labels }}
{{ toYaml .Values.spec.datanode.labels | indent 8 }}
{{- end }}
      annotations:
        hdfs-con***REMOVED***gmap-hash: {{ include (print $.Template.BasePath "/con***REMOVED***gmap.yaml") . | sha256sum }}
{{- if .Values.spec.datanode.annotations }}
{{ toYaml .Values.spec.datanode.annotations | indent 8 }}
{{- end }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.spec.datanode.terminationGracePeriodSeconds }}
{{- if .Values.spec.securityContext }}
      securityContext:
{{ toYaml .Values.spec.securityContext | indent 8 }}
{{- end }}
{{- if .Values.spec.datanode.af***REMOVED***nity }}
      af***REMOVED***nity:
{{ toYaml .Values.spec.datanode.af***REMOVED***nity | indent 8 }}
{{- end }}
{{- if .Values.spec.datanode.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.spec.datanode.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.spec.datanode.tolerations }}
      tolerations:
{{ toYaml .Values.spec.datanode.tolerations | indent 8 }}
{{- end }}
      initContainers:
      # wait-for-namenode exists because for some reason the datanode is unable
      # to connect to the namenode if it starts before the namenode's DNS name
      # is resolvable. We cannot use a clusterIP service for the namenode which
      # would always be resolvable, because on Openshift, clusterIP services
      # NAT loses sourceIPs, breaking HDFS clustering.
      - name: wait-for-namenode
        image: "{{ .Values.spec.image.repository }}:{{ .Values.spec.image.tag }}"
        imagePullPolicy: {{ .Values.spec.image.pullPolicy }}
        command:
        - '/bin/bash'
        - '-c'
        - 'until host $NAMENODE_HOST; do echo waiting for $NAMENODE_HOST; sleep 2; done;'
        resources:
          requests:
            memory: "5Mi"
            cpu: "10m"
          limits:
            memory: "50Mi"
            cpu: "50m"
        volumeMounts:
        - name: hdfs-datanode-data
          mountPath: /hadoop/dfs/data
          # we use a subPath to avoid the lost+found directory at the root of
          # the volume effecting the hdfs formating
          subPath: hadoop/dfs/data
        # required for openshift
        - name: namenode-empty
          mountPath: /hadoop/dfs/name
        env:
        - name: NAMENODE_HOST
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: hdfs-con***REMOVED***g
              key: namenode-host
      containers:
      - name: hdfs-datanode
        image: "{{ .Values.spec.image.repository }}:{{ .Values.spec.image.tag }}"
        imagePullPolicy: {{ .Values.spec.image.pullPolicy }}
        command: ["/hadoop-con***REMOVED***g/entrypoint.sh"]
        args: ["/hadoop-con***REMOVED***g/datanode-entrypoint.sh"]
        env:
        - name: HADOOP_LOGLEVEL
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: hdfs-con***REMOVED***g
              key: log-level
        - name: MY_NODE_NAME
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: spec.nodeName
        - name: MY_POD_NAME
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: metadata.namespace
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: hdfs-datanode
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: hdfs-datanode
              resource: limits.memory
        - name: JAVA_MAX_MEM_RATIO
          value: "50"
        ports:
        - containerPort: 9864
          name: http
        - containerPort: 9866
          name: fs
        - containerPort: 9867
          name: ipc
        volumeMounts:
        - name: hdfs-con***REMOVED***g
          mountPath: /hadoop-con***REMOVED***g
        - name: hdfs-datanode-data
          mountPath: /hadoop/dfs/data
          # we use a subPath to avoid the lost+found directory at the root of
          # the volume effecting the hdfs formating
          subPath: hadoop/dfs/data
        # required for openshift
        - name: namenode-empty
          mountPath: /hadoop/dfs/name
        livenessProbe:
          exec:
            command: ["/hadoop-con***REMOVED***g/check-datanode-healthy.sh" ]
          initialDelaySeconds: 90
          periodSeconds: 30
          failureThreshold: 2
          successThreshold: 1
        resources:
{{ toYaml .Values.spec.datanode.resources | indent 10 }}
      serviceAccount: hdfs
{{- if .Values.spec.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.spec.imagePullSecrets | indent 8 }}
{{- end }}
      volumes:
      - name: hdfs-con***REMOVED***g
        con***REMOVED***gMap:
          name: hdfs-con***REMOVED***g
          defaultMode: 0555
      - name: namenode-empty
        emptyDir: {}
      - name: hadoop-logs
        mountPath: /opt/hadoop/logs
  volumeClaimTemplates:
  - metadata:
      name: "hdfs-datanode-data"
      labels:
        app: hdfs-datanode
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: {{ .Values.spec.datanode.storage.class }}
      resources:
        requests:
          storage: {{ .Values.spec.datanode.storage.size }}
