apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: metering
  labels:
    app: metering
{{- block "extraMetadata" . }}
{{- end }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  template:
    metadata:
      labels:
        app: metering
{{- if .Values.labels }}
{{ toYaml .Values.labels | indent 8 }}
{{- end }}
      annotations:
        metering-con***REMOVED***g-hash: {{ include (print $.Template.BasePath "/metering-con***REMOVED***g.yaml") . | sha256sum }}
{{- if .Values.con***REMOVED***g.createAwsCredentialsSecret }}
        metering-aws-credentials-secrets-hash: {{ include (print $.Template.BasePath "/metering-aws-credentials-secrets.yaml") . | sha256sum }}
{{- end }}
{{- if and .Values.con***REMOVED***g.tls.enabled .Values.con***REMOVED***g.tls.createSecret }}
        metering-tls-secrets-hash: {{ include (print $.Template.BasePath "/metering-tls-secrets.yaml") . | sha256sum }}
{{- end }}
{{- if and .Values.authProxy.enabled .Values.authProxy.createCookieSecret }}
        metering-auth-proxy-cookie-secrets-hash: {{ include (print $.Template.BasePath "/metering-auth-proxy-cookie-secret.yaml") . | sha256sum }}
{{- end }}
{{- if and .Values.authProxy.enabled .Values.authProxy.createHtpasswdSecret }}
        metering-auth-proxy-htpasswd-secrets-hash: {{ include (print $.Template.BasePath "/metering-auth-proxy-htpasswd-secret.yaml") . | sha256sum }}
{{- end }}
{{- if and .Values.authProxy.enabled .Values.authProxy.createAuthenticatedEmailsSecret }}
        metering-auth-proxy-authenticated-emails-secrets-hash: {{ include (print $.Template.BasePath "/metering-auth-proxy-authenticated-emails-secret.yaml") . | sha256sum }}
{{- end }}
{{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: metering
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: POD_NAME
          valueFrom:
            ***REMOVED***eldRef:
              ***REMOVED***eldPath: metadata.name
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.con***REMOVED***g.awsCredentialsSecretName }}"
              key: aws-access-key-id
              optional: true
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.con***REMOVED***g.awsCredentialsSecretName }}"
              key: aws-secret-access-key
              optional: true
        - name: CHARGEBACK_LOG_DML_QUERIES
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: log-dml-queries
        - name: CHARGEBACK_LOG_DDL_QUERIES
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: log-ddl-queries
        - name: CHARGEBACK_LOG_REPORT
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: log-reports
        - name: CHARGEBACK_PROMETHEUS_HOST
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: prometheus-url
        - name: CHARGEBACK_PROMSUM_INTERVAL
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: promsum-poll-interval
        - name: CHARGEBACK_PROMSUM_CHUNK_SIZE
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: promsum-chunk-size
        - name: CHARGEBACK_PROMSUM_STEP_SIZE
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: promsum-step-size
        - name: CHARGEBACK_DISABLE_PROMSUM
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: disable-promsum
        - name: CHARGEBACK_PRESTO_HOST
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: presto-host
        - name: CHARGEBACK_HIVE_HOST
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: hive-host
        - name: CHARGEBACK_LEASE_DURATION
          valueFrom:
            con***REMOVED***gMapKeyRef:
              name: metering-con***REMOVED***g
              key: leader-lease-duration
{{/* If authProxy is enabled we do not enable TLS on the metering operator since the proxy will do TLS */}}
{{- if and .Values.con***REMOVED***g.tls.enabled (not .Values.authProxy.enabled) }}
        - name: CHARGEBACK_USE_TLS
          value: "true"
        - name: CHARGEBACK_TLS_KEY
          value: "/tls/tls.key"
        - name: CHARGEBACK_TLS_CERT
          value: "/tls/tls.crt"
{{- ***REMOVED*** }}
        - name: CHARGEBACK_USE_TLS
          value: "false"
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
        - name: "http"
          containerPort: 8080
        - name: "pprof"
          containerPort: 6060
        - name: "metrics"
          containerPort: 8082
{{- if and .Values.con***REMOVED***g.tls.enabled (not .Values.authProxy.enabled) -}}
{{- $_ := set .Values.readinessProbe.httpGet "scheme" "HTTPS" -}}
{{- $_ := set .Values.livenessProbe.httpGet "scheme" "HTTPS" -}}
{{- end }}
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
        livenessProbe:
{{ toYaml .Values.livenessProbe | indent 10 }}
{{- if and .Values.con***REMOVED***g.tls.enabled (not .Values.authProxy.enabled) }}
        volumeMounts:
        - name: tls
          mountPath: /tls
{{- end }}
{{- if .Values.authProxy.enabled }}
      - name: metering-auth-proxy
        image: "{{ .Values.authProxy.image.repository }}:{{ .Values.authProxy.image.tag }}"
        imagePullPolicy: {{ .Values.authProxy.image.pullPolicy }}
        args:
        - -provider=openshift
        - -https-address=:8081
        - -http-address=
        - -upstream=http://localhost:8080
        - -htpasswd-***REMOVED***le=/etc/proxy/htpasswd/auth
        - -tls-cert=/etc/tls/tls.crt
        - -tls-key=/etc/tls/tls.key
        - -client-secret-***REMOVED***le=/var/run/secrets/kubernetes.io/serviceaccount/token
        - -cookie-secret-***REMOVED***le=/etc/proxy/cookie-secret/cookie-secret-seed
        - -request-logging=true
        - -openshift-ca=/etc/pki/tls/cert.pem
        - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - -openshift-service-account=metering
{{- if .Values.authProxy.authenticatedEmailsEnabled }}
        - -authenticated-emails-***REMOVED***le=/etc/proxy/authenticated-emails/emails
{{- ***REMOVED*** }}
        - -email-domain=*
{{- end }}
{{- if .Values.authProxy.subjectAccessReviewEnabled }}
        - '-openshift-sar={"resource": "namespaces", "verb": "get"}'
{{- end }}
{{- if .Values.authProxy.delegateURLsEnabled }}
        - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
{{- end }}
        ports:
        - name: auth-proxy
          containerPort: 8081
        resources:
{{ toYaml .Values.authProxy.resources | indent 10 }}
        volumeMounts:
        - mountPath: /etc/tls
          name: tls
        - mountPath: /etc/proxy/cookie-secret
          name: cookie-secret
        - mountPath: /etc/proxy/htpasswd
          name: htpasswd-secret
{{- if .Values.authProxy.authenticatedEmailsEnabled  }}
        - mountPath: /etc/proxy/authenticated-emails
          name: authenticated-emails-secret
{{- end }}
{{- end }}
      volumes:
{{- if .Values.con***REMOVED***g.tls.enabled }}
      - name: tls
        secret:
          secretName: {{ .Values.con***REMOVED***g.tls.secretName }}
{{- end }}
{{- if .Values.authProxy.enabled }}
      - name: cookie-secret
        secret:
          secretName: {{ .Values.authProxy.cookieSecretName }}
      - name: htpasswd-secret
        secret:
          secretName: {{ .Values.authProxy.htpasswdSecretName }}
{{- if .Values.authProxy.authenticatedEmailsEnabled  }}
      - name: authenticated-emails-secret
        secret:
          secretName: {{ .Values.authProxy.authenticatedEmailsSecretName }}
{{- end }}
{{- end }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      serviceAccount: metering
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
{{- end }}
