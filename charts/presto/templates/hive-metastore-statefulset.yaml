apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: hive-metastore
  labels:
    app: hive
    hive: metastore
{{- block "extraMetadata" . }}
{{- end }}
spec:
  serviceName: hive-metastore
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: hive
      hive: metastore
{{- if .Values.spec.hive.labels }}
{{ toYaml .Values.spec.hive.labels | indent 6 }}
{{- end }}
  template:
    metadata:
      labels:
        app: hive
        hive: metastore
{{- if .Values.spec.hive.labels }}
{{ toYaml .Values.spec.hive.labels | indent 8 }}
{{- end }}
      annotations:
        hive-common-configmap-hash: {{ include (print $.Template.BasePath "/hive-common-config.yaml") . | sha256sum }}
        hive-common-secret-hash: {{ include (print $.Template.BasePath "/hive-common-secrets.yaml") . | sha256sum }}
        hive-metastore-configmap-hash: {{ include (print $.Template.BasePath "/hive-metastore-config.yaml") . | sha256sum }}
{{- if .Values.spec.config.createAwsCredentialsSecret }}
        presto-aws-credentials-secrets-hash: {{ include (print $.Template.BasePath "/presto-aws-credentials-secrets.yaml") . | sha256sum }}
{{- end }}
{{- if .Values.spec.hive.annotations }}
{{ toYaml .Values.spec.hive.annotations | indent 8 }}
{{- end }}
    spec:
      securityContext:
{{ toYaml .Values.spec.hive.securityContext | indent 8 }}
{{- if .Values.spec.hive.metastore.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.spec.hive.metastore.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.spec.hive.config.initSchema }}
      initContainers:
      - name: init-schema
        image: "{{ .Values.spec.hive.image.repository }}:{{ .Values.spec.hive.image.tag }}"
        imagePullPolicy: {{ .Values.spec.hive.image.pullPolicy }}
        env:
        - name: HIVE_LOGLEVEL
          valueFrom:
            configMapKeyRef:
              name: hive-server-config
              key: log-level
{{ include "hive-env" . | indent 8 }}
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: metastore
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: metastore
              resource: limits.memory
        - name: DB_TYPE
          value: "{{ .Values.spec.hive.config.schemaToolDBType }}"
        args: ['schematool', '-dbType', '$(DB_TYPE)', '-initSchema', '--verbose']
        resources:
{{ toYaml .Values.spec.hive.metastore.resources | indent 10 }}
        volumeMounts:
        - name: hive-metastore-db-data
          mountPath: /var/lib/hive
        # openshift requires volumeMounts for VOLUMEs in a Dockerfile
        - name: namenode-empty
          mountPath: /hadoop/dfs/name
        - name: datanode-empty
          mountPath: /hadoop/dfs/data
        - name: hive-warehouse-empty
          mountPath: /user/hive/warehouse
{{- end }}
      containers:
      - name: metastore
        args: ["hive", "--service", "metastore"]
        image: "{{ .Values.spec.hive.image.repository }}:{{ .Values.spec.hive.image.tag }}"
        imagePullPolicy: {{ .Values.spec.hive.image.pullPolicy }}
        ports:
        - name: meta
          containerPort: 9083
          protocol: TCP
        env:
        - name: HIVE_LOGLEVEL
          valueFrom:
            configMapKeyRef:
              name: hive-server-config
              key: log-level
{{ include "hive-env" . | indent 8 }}
        - name: MY_MEM_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: metastore
              resource: requests.memory
        - name: MY_MEM_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: metastore
              resource: limits.memory
        volumeMounts:
        - name: hive-metastore-db-data
          mountPath: /var/lib/hive
        # openshift requires volumeMounts for VOLUMEs in a Dockerfile
        - name: namenode-empty
          mountPath: /hadoop/dfs/name
        - name: datanode-empty
          mountPath: /hadoop/dfs/data
{{- if .Values.spec.config.sharedVolume.enabled }}
        - name: hive-warehouse-data
          mountPath: {{ .Values.spec.config.sharedVolume.mountPath }}
{{- end }}
{{- if or (not .Values.spec.config.sharedVolume.enabled) (and .Values.spec.config.sharedVolume.enabled (ne .Values.spec.config.sharedVolume.mountPath "/user/hive/warehouse") ) }}
        - name: hive-warehouse-empty
          mountPath: /user/hive/warehouse
{{- end }}
        resources:
{{ toYaml .Values.spec.hive.metastore.resources | indent 10 }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: {{ .Values.spec.hive.terminationGracePeriodSeconds }}
      serviceAccount: hive
      volumes:
      # these emptyDir volumes are necessary because Openshift requires VOLUMEs
      # in a Dockerfile have a corresponding volumeMount
      - name: hive-warehouse-empty
        emptyDir: {}
      - name: namenode-empty
        emptyDir: {}
      - name: datanode-empty
        emptyDir: {}
      - name: hive-metastore-db-data
{{- if .Values.spec.hive.metastore.storage.create }}
        persistentVolumeClaim:
          claimName: hive-metastore-db-data
{{- else }}
        emptyDir: {}
{{- end }}
{{- if .Values.spec.config.sharedVolume.enabled }}
      - name: hive-warehouse-data
        persistentVolumeClaim:
          claimName: {{ .Values.spec.config.sharedVolume.persistentVolumeClaimName }}
{{- end}}
