// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package s3 provides the client and types for making API
// requests to Amazon Simple Storage Service.
//
// See https://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01 for more information on this service.
//
// See s3 package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/s3/
//
// Using the Client
//
// To use the client for Amazon Simple Storage Service you will ***REMOVED***rst need
// to create a new instance of it.
//
// When creating a client for an AWS service you'll ***REMOVED***rst need to have a Session
// already created. The Session provides con***REMOVED***guration that can be shared
// between multiple service clients. Additional con***REMOVED***guration can be applied to
// the Session and service's client when they are constructed. The aws package's
// Con***REMOVED***g type contains several ***REMOVED***elds such as Region for the AWS Region the
// client should make API requests too. The optional Con***REMOVED***g value can be provided
// as the variadic argument for Sessions and client creation.
//
// Once the service's client is created you can use it to make API requests the
// AWS service. These clients are safe to use concurrently.
//
//   // Create a session to share con***REMOVED***guration, and load external con***REMOVED***guration.
//   sess := session.Must(session.NewSession())
//
//   // Create the service's client with the session.
//   svc := s3.New(sess)
//
// See the SDK's documentation for more information on how to use service clients.
// https://docs.aws.amazon.com/sdk-for-go/api/
//
// See aws package's Con***REMOVED***g type for more information on con***REMOVED***guration options.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/#Con***REMOVED***g
//
// See the Amazon Simple Storage Service client S3 for more
// information on creating the service's client.
// https://docs.aws.amazon.com/sdk-for-go/api/service/s3/#New
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These
// errors will also be available as const strings pre***REMOVED***xed with "ErrCode".
//
//   result, err := svc.AbortMultipartUpload(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle speci***REMOVED***c error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Speci***REMOVED***c error code handling
//       }
//       return err
//   }
//
//   fmt.Println("AbortMultipartUpload result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional con***REMOVED***guration to the API request.
//
//   ctx := context.Background()
//
//   result, err := svc.AbortMultipartUploadWithContext(ctx, params)
//
// See the request package documentation for more information on using Context pattern
// with the SDK.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
package s3
